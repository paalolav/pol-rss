"use strict";(self["webpackJsonp_2b8f84b4-3b97-49d9-b352-9282b3ee05ae_1.0.0"]=self["webpackJsonp_2b8f84b4-3b97-49d9-b352-9282b3ee05ae_1.0.0"]||[]).push([[134],{134:(e,t,n)=>{n.r(t),n.d(t,{ProxyService:()=>s});var a=n(909),i=n(676),r=n(814),o=n(309);class s{static setDebugMode(e){s._debugMode=e}static init(e){s._httpClient=e}static addProxyUrl(e){s._proxyUrls.includes(e)||s._proxyUrls.unshift(e)}static resetProxyUrls(){s._proxyUrls=[...s.DEFAULT_PROXIES]}static extractAuthParams(e){try{const t=new URL(e),n=t.searchParams.get("apiKey")||void 0,a={};return t.searchParams.forEach((e,t)=>{"apiKey"!==t&&(t.toLowerCase().includes("auth")||t.toLowerCase().includes("key")||t.toLowerCase().includes("token"))&&(a[t]=e)}),{cleanUrl:t.toString(),apiKey:n,otherParams:a}}catch(t){return this.logError("extractAuthParams",t,e),{cleanUrl:e,otherParams:{}}}}static logError(e,t,n){if(this._debugMode){const a=t instanceof Error?t.message:"Unknown error";i.Log.warn(this.LOG_SOURCE,`${e} failed for ${n}: ${a}`),r.h.warn(`ProxyService.${e} failed for ${n}: ${a}`)}}static async fetch(e,t={}){if(this._attemptedUrls=new Set,this._attemptedUrls.add(e),o.T.isMeltwaterFeed(e))return this.fetchWithRetry(e,3,t);const n=this.extractAuthParams(e),c=new Headers(t.headers||{});n.apiKey&&(c.set("Authorization",`Bearer ${n.apiKey}`),c.set("X-API-Key",n.apiKey));const d={...t,headers:c,redirect:"manual"};try{const t=await this._fetchWithRedirectHandling(e,d);if(t.ok)return this._debugMode&&r.h.log(`Direct fetch succeeded for ${e}`),t;this._debugMode&&(i.Log.info(this.LOG_SOURCE,`Direct fetch returned ${t.status}, trying proxies.`),r.h.log(`Direct fetch returned ${t.status}, trying proxies.`))}catch(t){this.logError("directFetch",t,e)}for(const t of s._proxyUrls)try{const n=t+encodeURIComponent(e);if(this._attemptedUrls.has(n)){this._debugMode&&r.h.warn(`Skipping already attempted proxy URL: ${n}`);continue}this._attemptedUrls.add(n);const a=await this._fetchWithRedirectHandling(n,d);if(a.ok)return this._debugMode&&r.h.log(`Proxy fetch succeeded with ${t}`),a;this._debugMode&&(i.Log.info(this.LOG_SOURCE,`Proxy ${t} returned ${a.status}.`),r.h.log(`Proxy ${t} returned ${a.status}.`))}catch(n){this.logError("proxyFetch",n,`${t}${e}`)}if(s._httpClient)try{const o={};n.apiKey&&(o.Authorization=`Bearer ${n.apiKey}`,o["X-API-Key"]=n.apiKey);const c=await s._httpClient.fetch(e,a.HttpClient.configurations.v1,{method:t.method||"GET",headers:o});if(c.ok){this._debugMode&&r.h.log(`SP HttpClient fetch succeeded for ${e}`);const t=await c.text(),n=new Headers;return c.headers&&Object.entries(c.headers).forEach(([e,t])=>{"string"==typeof t&&n.append(e,t)}),new Response(t,{status:c.status,statusText:c.statusText,headers:n})}this._debugMode&&(i.Log.info(this.LOG_SOURCE,`SP HttpClient returned ${c.status}.`),r.h.log(`SP HttpClient returned ${c.status}.`))}catch(t){this.logError("spHttpClientFetch",t,e)}const l=`Failed to fetch ${e} after trying direct access and all available proxies`;throw i.Log.error(this.LOG_SOURCE,new Error(l)),new Error(l)}static async _fetchWithRedirectHandling(e,t){let n=0,a=e;for(;n<this.MAX_REDIRECTS;){const e=await fetch(a,t);if(![301,302,303,307,308].includes(e.status))return e;const i=e.headers.get("location");if(!i)return e;let o;try{o=new URL(i,a).href}catch(e){o=i}if(this._attemptedUrls.has(o))return this._debugMode&&r.h.warn(`Detected redirect loop to already attempted URL: ${o}`),e;this._attemptedUrls.add(o),a=o,n++,this._debugMode&&r.h.log(`Following redirect ${n}/${this.MAX_REDIRECTS} to: ${a}`)}throw new Error(`ERR_TOO_MANY_REDIRECTS: Maximum redirects (${this.MAX_REDIRECTS}) exceeded for ${e}`)}static async fetchWithRetry(e,t=3,n={}){let a=null;const i=["Mozilla/5.0 SharePoint RSS Reader","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36","Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)"];this._attemptedUrls=new Set,this._attemptedUrls.add(e);for(let s=0;s<t;s++){try{const t=new Headers(n.headers||{});if(t.set("User-Agent",i[s%i.length]),t.set("Accept","application/xml, text/xml, */*"),o.T.isMeltwaterFeed(e))try{const n=new URL(e),a=n.searchParams.get("apiKey")||n.searchParams.get("api_key");a&&(0===s?t.set("Authorization",`Bearer ${a}`):1===s?t.set("X-API-Key",a):t.set("apiKey",a))}catch(e){}const c=await this._fetchWithRedirectHandling(e,{...n,headers:t,cache:"no-store"});if(c.ok)return this._debugMode&&r.h.log(`Direct fetch with retry ${s+1} succeeded for ${e}`),c;this._debugMode&&r.h.warn(`Direct fetch with retry ${s+1} returned ${c.status} for ${e}`),a=new Error(`HTTP ${c.status} - ${c.statusText||"Error"}`)}catch(e){a=e instanceof Error?e:new Error(String(e)),this._debugMode&&r.h.warn(`Direct fetch with retry ${s+1} failed: ${a.message}`)}await new Promise(e=>setTimeout(e,500))}try{this._debugMode&&r.h.log(`Falling back to proxy method after ${t} retries failed`);const i=this.extractAuthParams(e),o=new Headers(n.headers||{});i.apiKey&&o.set("Authorization",`Bearer ${i.apiKey}`);for(const t of s._proxyUrls)try{const a=t+encodeURIComponent(e);if(this._attemptedUrls.has(a))continue;this._attemptedUrls.add(a);const i=await this._fetchWithRedirectHandling(a,{...n,headers:o});if(i.ok)return i}catch(e){a=e instanceof Error?e:new Error(String(e))}}catch(e){a=e instanceof Error?e:new Error(String(e))}throw a||new Error(`Failed to fetch ${e} after ${t} retries`)}}s.LOG_SOURCE="ProxyService",s.DEFAULT_PROXIES=["https://api.allorigins.win/raw?url=","https://cors-anywhere.herokuapp.com/","https://crossorigin.me/"],s._proxyUrls=[...s.DEFAULT_PROXIES],s._httpClient=null,s._debugMode=!1,s.MAX_REDIRECTS=5,s._attemptedUrls=new Set}
}]);